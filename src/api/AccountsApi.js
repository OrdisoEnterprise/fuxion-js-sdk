/**
 * Fuxion Server
 * REST API Server of Fuxion
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountCreateSchema from '../model/AccountCreateSchema';
import AccountReturnSchema from '../model/AccountReturnSchema';
import AccountUpdateSchema from '../model/AccountUpdateSchema';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Accounts service.
* @module api/AccountsApi
* @version 0.1.0
*/
export default class AccountsApi {

    /**
    * Constructs a new AccountsApi. 
    * @alias module:api/AccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the restCreateItemApiAccountsPost operation.
     * @callback module:api/AccountsApi~restCreateItemApiAccountsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountReturnSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new account
     * @param {module:model/AccountCreateSchema} accountCreateSchema 
     * @param {module:api/AccountsApi~restCreateItemApiAccountsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountReturnSchema}
     */
    restCreateItemApiAccountsPost(accountCreateSchema, callback) {
      let postBody = accountCreateSchema;
      // verify the required parameter 'accountCreateSchema' is set
      if (accountCreateSchema === undefined || accountCreateSchema === null) {
        throw new Error("Missing the required parameter 'accountCreateSchema' when calling restCreateItemApiAccountsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountReturnSchema;
      return this.apiClient.callApi(
        '/api/accounts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restDeleteItemApiAccountsAccountIdDelete operation.
     * @callback module:api/AccountsApi~restDeleteItemApiAccountsAccountIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountReturnSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a account
     * @param {String} accountId 
     * @param {module:api/AccountsApi~restDeleteItemApiAccountsAccountIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountReturnSchema}
     */
    restDeleteItemApiAccountsAccountIdDelete(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling restDeleteItemApiAccountsAccountIdDelete");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountReturnSchema;
      return this.apiClient.callApi(
        '/api/accounts/{account_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restReadItemApiAccountsAccountIdGet operation.
     * @callback module:api/AccountsApi~restReadItemApiAccountsAccountIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountReturnSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a account
     * @param {String} accountId 
     * @param {module:api/AccountsApi~restReadItemApiAccountsAccountIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountReturnSchema}
     */
    restReadItemApiAccountsAccountIdGet(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling restReadItemApiAccountsAccountIdGet");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountReturnSchema;
      return this.apiClient.callApi(
        '/api/accounts/{account_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restReadItemsApiAccountsGet operation.
     * @callback module:api/AccountsApi~restReadItemsApiAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountReturnSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List accounts
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] 
     * @param {Number} [limit = 100)] 
     * @param {module:api/AccountsApi~restReadItemsApiAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountReturnSchema>}
     */
    restReadItemsApiAccountsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AccountReturnSchema];
      return this.apiClient.callApi(
        '/api/accounts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restUpdateItemApiAccountsAccountIdPut operation.
     * @callback module:api/AccountsApi~restUpdateItemApiAccountsAccountIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountReturnSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a account
     * @param {String} accountId 
     * @param {module:model/AccountUpdateSchema} accountUpdateSchema 
     * @param {module:api/AccountsApi~restUpdateItemApiAccountsAccountIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountReturnSchema}
     */
    restUpdateItemApiAccountsAccountIdPut(accountId, accountUpdateSchema, callback) {
      let postBody = accountUpdateSchema;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling restUpdateItemApiAccountsAccountIdPut");
      }
      // verify the required parameter 'accountUpdateSchema' is set
      if (accountUpdateSchema === undefined || accountUpdateSchema === null) {
        throw new Error("Missing the required parameter 'accountUpdateSchema' when calling restUpdateItemApiAccountsAccountIdPut");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountReturnSchema;
      return this.apiClient.callApi(
        '/api/accounts/{account_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
