/**
 * Fuxion Server
 * REST API Server of Fuxion
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import TransactionCreateSchema from '../model/TransactionCreateSchema';
import TransactionReturnSchema from '../model/TransactionReturnSchema';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 0.1.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the restCreateTransactionApiTransactionsPost operation.
     * @callback module:api/TransactionsApi~restCreateTransactionApiTransactionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionReturnSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new transaction
     * @param {module:model/TransactionCreateSchema} transactionCreateSchema 
     * @param {module:api/TransactionsApi~restCreateTransactionApiTransactionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionReturnSchema}
     */
    restCreateTransactionApiTransactionsPost(transactionCreateSchema, callback) {
      let postBody = transactionCreateSchema;
      // verify the required parameter 'transactionCreateSchema' is set
      if (transactionCreateSchema === undefined || transactionCreateSchema === null) {
        throw new Error("Missing the required parameter 'transactionCreateSchema' when calling restCreateTransactionApiTransactionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionReturnSchema;
      return this.apiClient.callApi(
        '/api/transactions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restReadItemsApiTransactionsGet operation.
     * @callback module:api/TransactionsApi~restReadItemsApiTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionReturnSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transactions
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] 
     * @param {Number} [limit = 100)] 
     * @param {module:api/TransactionsApi~restReadItemsApiTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionReturnSchema>}
     */
    restReadItemsApiTransactionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TransactionReturnSchema];
      return this.apiClient.callApi(
        '/api/transactions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restReadNeedApiTransactionsTransactionIdGet operation.
     * @callback module:api/TransactionsApi~restReadNeedApiTransactionsTransactionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionReturnSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a transaction
     * @param {String} transactionId 
     * @param {module:api/TransactionsApi~restReadNeedApiTransactionsTransactionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionReturnSchema}
     */
    restReadNeedApiTransactionsTransactionIdGet(transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling restReadNeedApiTransactionsTransactionIdGet");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionReturnSchema;
      return this.apiClient.callApi(
        '/api/transactions/{transaction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
